definitions:
  model.Claims:
    properties:
      access_mode:
        type: integer
      userid:
        type: integer
      username:
        type: string
    type: object
  model.Follower:
    properties:
      FollowerUserID:
        type: integer
      UserID:
        type: integer
    type: object
  model.Position:
    properties:
      Latitude:
        type: number
      Longitude:
        type: number
      UserId:
        type: integer
    required:
    - Latitude
    - Longitude
    type: object
  model.User:
    properties:
      access_mode:
        type: integer
      password:
        type: string
      userFriends:
        items:
          $ref: '#/definitions/model.Follower'
        type: array
      userPositions:
        items:
          $ref: '#/definitions/model.Position'
        type: array
      username:
        type: string
    type: object
  model.Alert:
    properties:
      alertTime:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Autentica o utilizador e gera o token para os próximos acessos
      parameters:
      - description: Autentica o utilizador e gera o token para os próximos acessos
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claims'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Realizar autenticação
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Realiza o logout do utilizador invalidando o token atual
      parameters:
      - description: Realiza logout
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.User'
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: bool
        "406":
          description: Cannot log out
      summary: Realizar desautenticação
  /auth/refresh_token:
    put:
      consumes:
      - application/json
      description: Atualiza o token de autenticação do usuário invalidando o antigo
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claims'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "406":
          description: Cannot invalidate old token
      summary: Atualiza token de autenticação
  /auth/register:
    post:
      consumes:
      - application/json
      description: Regista um utilizador
      parameters:
      - description: Registo do utilizador (username e password)
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Claims'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Realizar registro
  /follower:
    get:
      consumes:
      - application/json
      description: Exibe a lista, sem todos os campos, de todos os followers
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Follower'
            type: array
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Obtem os Followers
  /follower/assoc:
    post:
      consumes:
      - application/json
      description: Associa um Follower a um User
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Associate User as Follower
        in: body
        name: follower
        required: true
        schema:
          $ref: '#/definitions/model.Follower'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Follower'
            type: array
        "400":
          description: Bad request
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Associa um Follower(User) a um User
  /follower/deassoc:
    post:
      consumes:
      - application/json
      description: Desassocia um Follower de um User
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deassociate Follower from User
        in: body
        name: follower
        required: true
        schema:
          $ref: '#/definitions/model.Follower'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Follower'
            type: array
        "400":
          description: Bad request
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Desassocia um Follower(User) de um User
  /position:
    get:
      consumes:
      - application/json
      description: Exibe a lista da última localização do utilizador
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Position'
        "400":
          description: User Token Malformed
        "404":
          description: User Not found
      security:
        - BearerAuth: [ ]
      summary: Obter a última localização do utilizador
    post:
      consumes:
        - application/json
      description: Cria uma localizacao de um utilizador em especifico
      parameters:
        - description: Token
          in: header
          name: Authorization
          required: true
          type: string
        - description: Add Location
          in: body
          name: evaluation
          required: true
          schema:
            $ref: '#/definitions/model.Position'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Position'
        "400":
          description: Bad request
        "404":
          description: Not found
      security:
        - BearerAuth: [ ]
      summary: Adicionar uma localizaçao
  /position/{id}:
    delete:
      consumes:
        - application/json
      description: Exclui uma localização selecionada
      operationId: get-string-by-int
      parameters:
        - description: Token
          in: header
          name: Authorization
          required: true
          type: string
        - description: Position ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Delete succeeded!
        "404":
          description: None found!
      security:
        - BearerAuth: [ ]
      summary: Exclui uma localização
  /position/history:
    get:
      consumes:
        - application/json
      description: Exibe a lista de todas as localizações do utilizador
      parameters:
        - description: Token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Position'
            type: array
        "400":
          description: User Token Malformed
        "404":
          description: User Not found
      security:
        - BearerAuth: [ ]
      summary: Obtem todas as localizações do utilizador
  /alert/time:
    put:
      consumes:
        - application/json
      description: Atualiza a periodicidade de alerta
      parameters:
        - description: Token
          in: header
          name: Authorization
          required: true
          type: string
        - description: Update Alert Time
          in: body
          name: alertTime
          required: true
          schema:
            $ref: '#/definitions/model.Alert'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Alert'
        "400":
          description: Bad request
        "404":
          description: Not found
        "406":
          description: Not acceptable
      security:
        - BearerAuth: [ ]
      summary: Atualiza a periodicidade de alerta
  /socket:
    get:
      consumes:
        - application/json
      description: Inicia todos os recursos necessario para a criação de uma webSocket
        com o cliente
      parameters:
        - description: Token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Connection confirm
        "400":
          description: User Token Malformed
        "404":
          description: Connection failed
      security:
        - BearerAuth: [ ]
      summary: Iniciar conecção com a webSocket
swagger: "2.0"
